#!/usr/bin/env perl
use strict;
use warnings;
use 5.020;
no autovivification warn => qw(fetch store exists delete);
use if "$]" >= 5.022, experimental => 're_strict';
no if "$]" >= 5.031009, feature => 'indirect';
no if "$]" >= 5.033001, feature => 'multidimensional';
no if "$]" >= 5.033006, feature => 'bareword_filehandles';
no if "$]" >= 5.041009, feature => 'smartmatch';
no feature 'switch';
use Path::Tiny;
use Mojo::UserAgent;
use YAML::PP;
use Digest::MD5 'md5_hex';
use JSON::Schema::Modern;
use JSON::Schema::Modern::Document::OpenAPI;

# note: the latest versions can always be found at https://spec.openapis.org/
# Once /latest links exist, we will pull from those instead, and use those names in code to ensure
# we always use the latest files.

# see https://spec.openapis.org/#openapi-specification-schemas for the latest links

my %files = (
  # metaschema for json schemas contained within openapi documents
  'oas/dialect/base.schema.json' => JSON::Schema::Modern::Document::OpenAPI::DEFAULT_DIALECT,

  # vocabulary definition
  'oas/meta/base.schema.json' => JSON::Schema::Modern::Document::OpenAPI::OAS_VOCABULARY,

  # openapi document schema + custom json schema dialect
  'oas/schema-base.json' => JSON::Schema::Modern::Document::OpenAPI::DEFAULT_BASE_METASCHEMA,

  # the main openapi document schema
  'oas/schema.json' => JSON::Schema::Modern::Document::OpenAPI::DEFAULT_METASCHEMA,

  'oas/LICENSE' => 'https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/LICENSE',
);

my $yaml = YAML::PP->new(boolean => 'JSON::PP');
my $js = JSON::Schema::Modern->new(validate_formats => 1);
my $ua = Mojo::UserAgent->new;
my %checksums;

# download fresh copies of our files, validate against their schemas and against our code
foreach my $target (keys %files) {
  my $uri = $files{$target};

  print "# fetching $uri to share/$target\n" if $ENV{DEBUG};
  my $res = $ua->get($uri)->result;
  die "Failed to fetch $uri", $res->code, " ", $res->message if $res->is_error;

  $target = path('share', $target);
  $target->parent->mkpath;
  $target->spew_raw(my $content = $res->body);
  $checksums{$target} = md5_hex($content);

  next if $target =~ /LICENSE$/;

  my $document = $js->add_schema($yaml->load_string($content));

  print "# validating ", $document->canonical_uri, "\n" if $ENV{DEBUG};
  my $result = $document->validate;
  die $js->_json_decoder->pretty->encode($result) if not $result->valid;

  die 'for uri ', $document->schema->{'$id'}, ', mismatch between jsonSchemaDialect "',
      $document->schema->{properties}{jsonSchemaDialect}{default},
      '" and assumed default "',
      JSON::Schema::Modern::Document::OpenAPI->DEFAULT_DIALECT, '"'
    if exists((($document->schema->{properties}//{})->{jsonSchemaDialect}//{})->{default})
      and $document->schema->{properties}{jsonSchemaDialect}{default}
        ne JSON::Schema::Modern::Document::OpenAPI->DEFAULT_DIALECT;
}

# compute checksums and record them in the test
path('t/checksums.t')->edit_raw(sub {
  m/^__DATA__$/mg;
  $_ = substr($_, 0, pos()+1).join("\n", map $_.' '.$checksums{$_}, sort keys %checksums)."\n";
});
